主程式
// Fig. 9.3: fig09_03.cpp
// Program to test class Time.
// NOTE: This file must be compiled with Time.cpp.
#include <iostream>
#include <stdexcept> // for invalid_argument exception class
#include "DATE.h" // include definitionof class Time from Time.h
using namespace std;

int main()                                                                                                                                                     
{
    Date t; // instantiate object t of class Time

    // output Time object t's initial values
    cout << "The initial universal Date is ";
    t.printUniversal(); 
    cout << "\nThe initial standard Date is ";
    t.printStandard(); 

    t.setDate(2022, 7, 1); // change time

    // output Time object t's new values
    cout << "\n\nUniversal Date after setDate is ";
    t.printUniversal(); 
    cout << "\nStandard Date after setDate is ";
    t.printStandard();

    // attempt to set the time with invalid values
    try
    {
        t.setDate(99, 99, 99); // all values out of range
    } // end try
    catch (invalid_argument& e)
    {
        cout << "\n\nException: " << e.what() << endl;
    } // end catch

    // output t's values after specifying invalid values
    cout << "\nAfter attempting invalid settings:"
        << "\nUniversal time: ";
    t.printUniversal();
    cout << "\nStandard time: ";
    t.printStandard(); 
    cout << endl;
} // end main





實作檔
// Fig. 9.2: Time.cpp
// Time class member-function definitions.
#include <iostream>
#include <iomanip>
#include <stdexcept> // for illegal_argument exception class
#include "DATE.h" // include definition of class Time from Time.h

using namespace std;

// Time constructor initializes each data member to zero.
Date::Date()
    : year(0), month(0), day(0)
{
} // end Time constructor

// set new Time value using universal time
void Date::setDate(int y, int m, int d)
{
    // validate hour, minute and second
    if ((y >= 0 && y < 9999) && (m >= 1 && m <= 12) &&
        (d >= 1 && d <= 31))
    {
        year = y;
        month = m;
        day = d;
    } // end if
    else
        throw invalid_argument(
            "year, month and/or day was out of range");
} 

// print Time in universal-time format (HH:MM:SS)
void Date::printUniversal() const //印出西元年
{
    cout << "西元" << setfill('0') << setw(4) << year << "/"
        << setw(2) << month << "/" << setw(2) << day ;
} // end function printUniversal

// print Time in standard-time format (HH:MM:SS AM or PM)
void Date::printStandard() const //印出民國年
{
    cout << "民國" << ((year < 1) ? year : year-1911) << "/"
        << setfill('0') << setw(2) << month << "/" << setw(2)
        << day ;
} // end function printStandard




標頭檔
// Fig. 9.1: Time.h
// Time class definition.
// Member functions are defined in Time.cpp

// prevent multiple inclusions of header
#ifndef DATE_H
#define DATE_H

// Time class definition
class Date
{
public:
	Date(); // constructor
	void setDate(int, int, int); 
	void printUniversal() const; 
	void printStandard() const; 
private:
	unsigned int year; // 0 - 9999 
	unsigned int month; // 1 - 12
	unsigned int day; // 1 - 31
}; // end class Time

#endif
