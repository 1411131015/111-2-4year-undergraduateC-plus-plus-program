1.	請修改電腦桌面的C語言程式碼(midtest.c)滿足以下條件:
struct stuData {
unsigned int StuNum;
char name[20];
int math, computer;
struct stuData *nextStu
} ;
(a)	建立一個鏈結串列(linked list)，修改其結構如上，輸入學生資料，插入(insert)鏈結串列中，能將鏈結串列內的資料根據學號由小到大印出(可參考舊版p.515、新版p.658)。(50分)
(b)	由鍵盤輸入學號，根據學號將該筆學生資料由此鏈結串列中刪除(delete)(可參考舊版p.516、新版p.659)，若找不到該筆資料，程式需要提醒使用者找不到。(50分)
(c)	將題(b)改為能夠刪除多筆重複內容的節點的程式。(10分)


// Fig. 12.3: fig12_03.c
// Inserting and deleting nodes in a list
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
// self-referential structure                       
struct listNode {                                      
   unsigned int StuNum; // each listNode contains a character 
   char name[20];
   int math,com;
   struct listNode *nextPtr; // pointer to next node
}; 

typedef struct listNode ListNode; // synonym for struct listNode
typedef ListNode *ListNodePtr; // synonym for ListNode*

// prototypes
void insert(ListNodePtr *sPtr,int id, char name[],int math,int computer);
char delete(ListNodePtr *sPtr, int id);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

int main(void)
{ 
   ListNodePtr startPtr = NULL; // initially there are no nodes
   char name[50];
   unsigned int StuNum;
   int math,com; // char entered by user

   instructions(); // display the menu
   printf("%s", "? ");
   unsigned int choice; // user's choice
   scanf("%u", &choice);

   // loop while user does not choose 3
   while (choice != 3) { 

      switch (choice) { 
         case 1:
            printf("%s", "請輸入學號: ");
            scanf("\n%d", &StuNum);
            printf("%s", "請輸入姓名: ");
			scanf("%s", name);
             printf("%s", "請輸入數學: ");
            scanf("\n%d", &math);
             printf("%s", "請輸入電腦: ");
            scanf("\n%d", &com);
            insert(&startPtr,StuNum,name,math,com); // insert item in list
            printList(startPtr);
            break;
         case 2: // delete an element
            // if list is not empty
            if (!isEmpty(startPtr)) { 
               printf("%s", "請輸入要刪除的學號:");
               scanf("\n%d", &StuNum);

               // if character is found, remove it
               if (delete(&startPtr, StuNum)) { // remove item
                  printf("%d deleted.\n", StuNum);
                  printList(startPtr);
               } 
               else {
                  printf("%c not found.\n\n", StuNum);
               } 
            } 
            else {
               puts("List is empty.\n");
            } 

            break;
         default:
            puts("Invalid choice.\n");
            instructions();
            break;
      } // end switch

      printf("%s", "? ");
      scanf("%u", &choice);
   } 
   puts("End of run.");
} 

// display program instructions to user
void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.");
} 

// insert a new value into the list in sorted order
void insert(ListNodePtr *sPtr, int id,char name[],int math,int computer)
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); // create node

   if (newPtr != NULL) { // is space available/*新節點配置成功 */
      newPtr->StuNum = id; // place value in node
      strcpy(newPtr->name, name);
	  newPtr->math = math;
      newPtr->com = computer;
      newPtr->nextPtr = NULL; // node does not link to another node

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;

      // loop to find the correct location in the list       
      while (currentPtr != NULL && id > currentPtr->StuNum) {
         previousPtr = currentPtr; // walk to ...               
         currentPtr = currentPtr->nextPtr; // ... next node 
      }                                          

      // insert new node at beginning of list
      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else { // insert new node between previousPtr and currentPtr
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%d not inserted. No memory available.\n", id);
   } 
} 



// delete a list element

char delete(ListNodePtr *sPtr, int id)
{ 
   // delete first node if a match is found
   if (id == (*sPtr)->StuNum) { 
      ListNodePtr tempPtr = *sPtr; // hold onto node being removed
      *sPtr = (*sPtr)->nextPtr; // de-thread the node
      free(tempPtr); // free the de-threaded node/*釋放tempPtr指向的節點*/
      return id;
   } 
   else { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      // loop to find the correct location in the list
      while (currentPtr != NULL && currentPtr->StuNum != id) { 
         previousPtr = currentPtr; // walk to ...  
         currentPtr = currentPtr->nextPtr; // ... next node  
      } 

      // delete node at currentPtr
      if (currentPtr != NULL) { 
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         return id;
      } 
   } 

   return '\0';
} 


// return 1 if the list is empty, 0 otherwise
int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 



// print the list
void printList(ListNodePtr currentPtr)
{ 
   // if list is empty
   if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
   else { 
      puts("The list is:");

      // while not the end of the list
      while (currentPtr != NULL) { 
         printf("%d %s %d %d --> ", currentPtr->StuNum,currentPtr->name,currentPtr->math,currentPtr->com);
         currentPtr = currentPtr->nextPtr;   
      } 

      puts("NULL\n");
   } 
} 
