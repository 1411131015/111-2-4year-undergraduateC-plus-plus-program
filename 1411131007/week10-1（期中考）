#include <stdio.h>
#include <stdlib.h>
#include <string.h>
                      
struct listNode {                                      
   int ID; 
   char Name[20];
   int math, com;
   struct listNode *nextPtr; 
}; 

typedef struct listNode ListNode;
typedef ListNode *ListNodePtr;

void instructions(void);
void insert(ListNodePtr *sPtr, int id, int math, int computer, char name[]);
void printList(ListNodePtr currentPtr);
char delete(ListNodePtr *sPtr, int value);

int main(void)
{ 
	ListNodePtr startPtr = NULL; 
	int item, math, computer;
	char name[20];
	unsigned int choice;
	instructions();
	printf("%s", "? ");
	scanf("%u", &choice);
	
	while (choice != 3) { 
    	switch (choice) { 
    	 	case 1:
				printf("%s", "請輸入學號: ");
				scanf("\n%d", &item);
				printf("%s", "請輸入姓名: ");
				scanf("\n%s", name);
				printf("%s", "請輸入數學成績: ");
				scanf("\n%d", &math);
				printf("%s", "請輸入計概成績: ");
				scanf("\n%d", &computer);
				insert(&startPtr, item, math, computer, name); 
				printList(startPtr);
	            break;
        	case 2:
            	if (!isEmpty(startPtr)) { 
	               printf("%s", "請輸入學號: ");
	               scanf("\n%d", &item);
	            	if (delete(&startPtr, item)) {
	                  printf("%d deleted.\n", item);
	                  printList(startPtr);
	            	} 
	            	else {
	                  printf("%d not found.\n\n", item);
	            	} 
            	}
	        	else {
	            	puts("List is empty.\n");
	            } 
            break;
        	default:
            puts("Invalid choice.\n");
            instructions();
            break;
        }
		printf("%s", "? ");
		scanf("%u", &choice);
   } 
   puts("End of run.");
} 

void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.");
} 

void insert(ListNodePtr *sPtr, int id, int math, int computer, char name[])
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); 
   
   if (newPtr != NULL) {
      newPtr->ID = id;
      strcpy(newPtr->Name, name);
      newPtr->math = math;
      newPtr->com = computer;
      newPtr->nextPtr = NULL; 

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;
      
      while (currentPtr != NULL && id > currentPtr->ID) {
         previousPtr = currentPtr;              
         currentPtr = currentPtr->nextPtr;
      }                                          

      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else {
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%c not inserted. No memory available.\n", id);
   } 
} 

char delete(ListNodePtr *sPtr, int value)
{ 
   if (value == (*sPtr)->ID) { 
      ListNodePtr tempPtr = *sPtr;
      *sPtr = (*sPtr)->nextPtr;
      free(tempPtr);
      return value;
   } 
   else { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      while (currentPtr != NULL && currentPtr->ID != value) { 
         previousPtr = currentPtr; 
         currentPtr = currentPtr->nextPtr;  
      } 

      if (currentPtr != NULL) { 
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         return value;
      } 
   } 
   return '\0';
} 

int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 

void printList(ListNodePtr currentPtr)
{ 
   if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
   else { 
      puts("The list is:");
      while (currentPtr != NULL) { 
         printf("%s %d %d %d", currentPtr->Name ,currentPtr->ID, currentPtr->math, currentPtr->com);
         currentPtr = currentPtr->nextPtr;   
      } 
      puts("NULL\n");
   } 
} 
