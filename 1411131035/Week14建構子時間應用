@@@TT.cpp@@@
#include <iostream>
#include <stdexcept> // for invalid_argument exception class
#include "Time.h" // include definitionof class Time from Time.h
using namespace std;

int main()
{
    Time t(9,25,45); // instantiate object t of class Time

    // output Time object t's initial values
    cout << "The initial universal time is ";
    t.printUniversal(); // 00:00:00
    cout << "\nThe initial standard time is ";
    t.printStandard(); // 12:00:00 AM

    t.setTime(13, 27, 6); // change time

    // output Time object t's new values
    cout << "\n\nUniversal time after setTime is ";
    t.printUniversal(); // 13:27:06
    cout << "\nStandard time after setTime is ";
    t.printStandard(); // 1:27:06 PM

    // attempt to set the time with invalid values
    try
    {
        t.setTime(99, 99, 99); // all values out of range
    } // end try
    catch (invalid_argument& e)
    {
        cout << "\n\nException: " << e.what() << endl;
    } // end catch

    // output t's values after specifying invalid values
    cout << "\nAfter attempting invalid settings:"
        << "\nUniversal time: ";
    t.printUniversal(); // 13:27:06
    cout << "\nStandard time: ";
    t.printStandard(); // 1:27:06 PM
    cout << endl;
} // end main

@@@Time.h@@@
// Fig. 9.1: Time.h
// Time class definition.
// Member functions are defined in Time.cpp

// prevent multiple inclusions of header
#ifndef TIME_H
#define TIME_H

// Time class definition
class Time
{
public:
	Time(int, int, int); // constructor
	void setTime(int, int, int); // set hour, minute and second
	void printUniversal() const; // print time in universal-time format
	void printStandard() const; // print time in standard-time format
private:
	unsigned int hour; // 0 - 23 (24-hour clock format)
	unsigned int minute; // 0 - 59
	unsigned int second; // 0 - 59
}; // end class Time#pragma once
#endif

@@@Time.cpp@@@
// Fig. 9.2: Time.cpp
// Time class member-function definitions.
#include <iostream>
#include <iomanip>
#include <stdexcept> // for illegal_argument exception class
#include "Time.h" // include definition of class Time from Time.h

using namespace std;

// Time constructor initializes each data member to zero.
Time::Time(int h, int m, int s)
{
    hour = h;
    minute = m;
    second = s;
} // end Time constructor

// set new Time value using universal time
void Time::setTime(int h, int m, int s)
{
    // validate hour, minute and second
    if ((h >= 0 && h < 24) && (m >= 0 && m < 60) &&
        (s >= 0 && s < 60))
    {
        hour = h;
        minute = m;
        second = s;
    } // end if
    else
        throw invalid_argument(
            "hour, minute and/or second was out of range");
} // end function setTime

// print Time in universal-time format (HH:MM:SS)
void Time::printUniversal() const
{
    cout << setfill('0') << setw(2) << hour << ":"
        << setw(2) << minute << ":" << setw(2) << second;
} // end function printUniversal

// print Time in standard-time format (HH:MM:SS AM or PM)
void Time::printStandard() const
{
    cout << ((hour == 0 || hour == 12) ? 12 : hour % 12) << ":"
        << setfill('0') << setw(2) << minute << ":" << setw(2)
        << second << (hour < 12 ? " AM" : " PM");
} // end function printStandard






@@@DD.h@@@
#include <iostream>
#include <stdexcept> // for invalid_argument exception class
#include "Date.h" // include definitionof class Date from Date.h
using namespace std;

int main()
{
    Date t(1902, 2, 28); // instantiate object t of class Date

    // output Date object t's initial values
    cout << "The initial universal Date is ";
    t.printUniversal(); // 00:00:00
    cout << "\nThe initial standard Date is ";
    t.printStandard(); // 12:00:00 AM

    t.setDate(2002, 1, 7); // change Date

    // output Date object t's new values
    cout << "\n\nUniversal Date after setDate is ";
    t.printUniversal(); // 13:27:06
    cout << "\nStandard Date after setDate is ";
    t.printStandard(); // 1:27:06 PM

    // attempt to set the Date with invalid values
    try
    {
        t.setDate(99, 99, 99); // all values out of range
    } // end try
    catch (invalid_argument& e)
    {
        cout << "\n\nException: " << e.what() << endl;
    } // end catch

    // output t's values after specifying invalid values
    cout << "\nAfter attempting invalid settings:"
        << "\nUniversal Date: ";
    t.printUniversal(); // 13:27:06
    cout << "\nStandard Date: ";
    t.printStandard(); // 1:27:06 PM
    cout << endl;
} // end main

@@@Date.h@@@
// Fig. 9.1: Date.h
// Date class definition.
// Member functions are defined in Date.cpp

// prevent multiple inclusions of header
#ifndef Date_Y
#define Date_Y

// Date class definition
class Date
{
public:
	Date(int, int, int); // constructor
	void setDate(int, int, int); // set Year, month and second
	void printUniversal() const; // print Date in universal-Date format
	void printStandard() const; // print Date in standard-Date format
private:
	unsigned int Year; // 0 - 23 (24-Year clock format)
	unsigned int Month; // 0 - 59
	unsigned int Day; // 0 - 59
}; // end class Date#pragma once
#endif

@@@Date.cpp@@@
// Fig. 9.2: Date.cpp
// Date class member-function definitions.
#include <iostream>
#include <iomanip>
#include <stdexcept> // for illegal_argument exception class
#include "Date.h" // include definition of class Date from Date.h

using namespace std;

// Date constructor initializes each data member to zero.
Date::Date(int y, int m, int d)
{
    Year = y;
    Month = m;
    Day = d;
} // end Date constructor

// set new Date value using universal Date
void Date::setDate(int y, int m, int d)
{
    // validate Year, Month and Day
    if ((y >= 1 && y < 9999) && (m >= 1 && m < 12) &&
        (d >= 1 && d < 31))
    {
        Year = y;
        Month = m;
        Day = d;
    } // end if
    else
        throw invalid_argument(
            "Year, Month and/or Day was out of range");
} // end function setDate

// print Date in universal-Date format (HH:MM:SS)
void Date::printUniversal() const
{
    cout << setfill('0') << setw(2) << Year << "/"
        << setw(2) << Month << "/" << setw(2) << Day;
} // end function printUniversal

// print Date in standard-Date format (HH:MM:SS AM or PM)
void Date::printStandard() const
{
    cout << (Year < 1911 ? " 民國前" : " 民國")
        << ((Year < 1911 ) ?  1911-Year : Year - 1911  )<< "/"
        << setfill('0') << setw(2) << Month << "/" << setw(2)
        << Day;
} // end function printStandard
